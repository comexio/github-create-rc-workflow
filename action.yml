name: Release Candidate Workflow

description: Release Candidate Workflow

inputs:
  CICD_GITHUB_TOKEN:
    required: true
    description: TOKEN
  ORIGIN:
    required: true
    description: ORIGIN

runs:
  using: "composite"
  steps:
  - name: Baixando código do repositório
    uses: actions/checkout@v4

  - name: Get latest release tag
    shell: bash
    id: latest_tag
    run: |
      echo "Buscando a última release marcada como latest..."

      LATEST_TAG=$(curl -s -H "Authorization: Bearer ${{ inputs.CICD_GITHUB_TOKEN }}" \
        -H "Accept: application/vnd.github+json" \
        "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')

      if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "null" ]]; then
        echo "::error::Nenhuma release marcada como latest encontrada!"
        exit 1
      fi

      echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
      echo "Última release marcada como latest: $LATEST_TAG"
    env:
      GITHUB_TOKEN: ${{ inputs.CICD_GITHUB_TOKEN }}

  - name: Check Current Branch
    id: current
    run: |
      echo "CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
      VERSION=${{ env.LATEST_TAG }}
      echo "TAG=$VERSION" >> $GITHUB_ENV
    shell: bash

  - name: Install semver
    run: |
      wget -O /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
      chmod +x /usr/local/bin/semver
    shell: bash

  - name: validar origem de semver
    run: |
      # Obtém a branch atual do runner
      BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')

      echo "Branch detectada: $BRANCH_NAME"

      # Define o tipo de release (Release ou Hotfix) e a estratégia de versionamento
      case "$BRANCH_NAME" in
        fc/* | feature/*)
          echo "Detectado Feature Candidate ou Feature Branch - Incrementando Minor"
          echo "TAG=$(semver bump minor ${{ env.TAG }})" >> $GITHUB_ENV
          echo "RELEASE_TYPE=Release" >> $GITHUB_ENV
          ;;
        fix/* | hotfix/* | bugfix/*)
          echo "Detectado Fix, Hotfix ou Bugfix - Incrementando Patch"
          echo "TAG=$(semver bump patch ${{ env.TAG }})" >> $GITHUB_ENV
          echo "RELEASE_TYPE=Hotfix" >> $GITHUB_ENV
          ;;
        *)
          echo "Prefixo desconhecido, falhando o processo."
          exit 1
          ;;
      esac

      echo "Nova TAG gerada: $TAG"
      echo "Tipo de release: $RELEASE_TYPE"
    shell: bash

  - name: Verificar se a branch já existe via API
    shell: bash
    id: check-branch-exists
    run: |
      echo "Verificando se a branch rc/${{ env.TAG }} existe via API..."

      RESPONSE=$(curl -s -H "Authorization: Bearer ${{ inputs.CICD_GITHUB_TOKEN }}" \
        -H "Accept: application/vnd.github+json" \
        "https://api.github.com/repos/${{ github.repository }}/branches?per_page=100")

      # Filtra a branch pelo nome exato
      BRANCH_EXISTS=$(echo "$RESPONSE" | jq -r --arg BRANCH_NAME "rc/${{ env.TAG }}" '.[] | select(.name == $BRANCH_NAME) | .name')

      if [[ -n "$BRANCH_EXISTS" ]]; then
        echo "A branch rc/${{ env.TAG }} já existe."
        echo "exists=true" >> $GITHUB_ENV
      else
        echo "A branch rc/${{ env.TAG }} não existe."
        echo "exists=false" >> $GITHUB_ENV
      fi
    env:
      GITHUB_TOKEN: ${{ inputs.CICD_GITHUB_TOKEN }}

  - if: env.exists == 'true'
    run: |
      echo "------------  Open PR from ${{ steps.current.outputs.CURRENT_BRANCH }} to ${{env.TAG}}.  ------------"
      gh pr create --base=rc/${{env.TAG}} --head=${{ steps.current.outputs.CURRENT_BRANCH }} --title="[FC] branch ${{ steps.current.outputs.CURRENT_BRANCH }} to RC/${{env.TAG}} " --body="Pull Request FC to RC"      
    shell: bash

  - if: env.exists == 'false'
    shell: bash
    run: |
      set -e  # Interrompe o script em caso de erro

      echo "New Release Candidate is rc/${{ env.TAG }}"

      # Atualizando a branch main
      git fetch origin
      git checkout main
      git pull --rebase origin main

      # Verifica se a branch RC já existe no repositório remoto
      if git ls-remote --exit-code --heads origin rc/${{ env.TAG }}; then
        echo "Branch rc/${{ env.TAG }} já existe. Atualizando..."
        git fetch origin rc/${{ env.TAG }}
        git checkout rc/${{ env.TAG }}
        git pull --rebase origin rc/${{ env.TAG }}
      else
        echo "Criando nova branch rc/${{ env.TAG }}"
        git checkout -b rc/${{ env.TAG }}
        git push --set-upstream origin rc/${{ env.TAG }}
      fi

      # Obtendo a data atual
      CURRENT_DATE=$(date +"%Y-%m-%d")

      # Verificando se a tag já existe antes de criar a release
      TAG_EXISTS=$(git ls-remote --tags origin | grep -o "refs/tags/${{ env.TAG }}")

      if [[ -n "$TAG_EXISTS" ]]; then
        echo "A tag ${{ env.TAG }} já existe. Pulando a criação da release."
      else
        echo "Criando nova release e tag: rc/${{ env.TAG }}"

        gh release create "${{ env.TAG }}" \
          --title "$RELEASE_TYPE ${{ env.TAG }}" \
          --notes "**Changes in this $RELEASE_TYPE**\n\n- Origin: rc/${{ env.TAG }}\n- Release date: $CURRENT_DATE\n- Commit: ${{ github.sha }}" \
          --draft=false \
          --prerelease
      fi

      # Verificando se há commits entre as branches antes de criar o PR
      COMMITS_A_MAIS=$(git rev-list --count origin/rc/${{ env.TAG }}..origin/${{ steps.current.outputs.CURRENT_BRANCH }})

      if [[ "$COMMITS_A_MAIS" -gt 0 ]]; then
        echo "Verificando se o PR já existe para a branch RC"

        PR_EXISTS=$(gh pr list --base "rc/${{ env.TAG }}" --head "${{ steps.current.outputs.CURRENT_BRANCH }}" --json number --jq '.[].number')

        if [[ -n "$PR_EXISTS" ]]; then
          echo "Já existe um PR para a branch ${{ steps.current.outputs.CURRENT_BRANCH }} em rc/${{ env.TAG }}. Nenhuma ação necessária."
        else
          echo "Criando PR para merge na branch RC"

          gh pr create --base="rc/${{ env.TAG }}" \
                      --head="${{ steps.current.outputs.CURRENT_BRANCH }}" \
                      --title="[FC] branch ${{ steps.current.outputs.CURRENT_BRANCH }} to RC/${{ env.TAG }}" \
                      --body="Pull Request FC to RC"
        fi
      else
        echo "Nenhum commit novo entre rc/${{ env.TAG }} e ${{ steps.current.outputs.CURRENT_BRANCH }}. PR não será criado."
      fi
    env:
      GITHUB_TOKEN: ${{ inputs.CICD_GITHUB_TOKEN }}

name: Run Unit Tests

description: Run Unit Tests

inputs:
  CICD_GITHUB_TOKEN:
    required: true
    description: TOKEN
  ORIGIN:
    required: true
    description: ORIGIN

runs:
  using: "composite"
  steps:
  - name: Baixando código do repositório
    uses: actions/checkout@v4
    with:
      fetch-depth: 0

  - name: Change Owner of Container Working Directory
    run: chown -R $(id -u):$(id -g) $PWD
    shell: bash

  # - name: Get latest release
  #   id: latest_release
  #   uses: kaliber5/action-get-release@v1
  #   with:
  #     token: ${{ inputs.CICD_GITHUB_TOKEN }}
  #     latest: true

  - name: Get latest tag
    id: latest_tag
    run: |
      LATEST_TAG=$(git ls-remote --tags --sort=-v:refname origin | awk -F'/' 'NR==1{print $3}')

      if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "null" ]]; then
        echo "No tag found."
        exit 1
      fi

      echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
      echo "Última tag encontrada: $LATEST_TAG"
    shell: bash

  - name: Check Current Branch
    id: current
    run: |
      git config user.name "GitHub Actions Bot"
      git config user.email "devops@logcomex.com"
      echo "CURRENT_DATE=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
      echo "CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
      VERSION=${{ steps.latest_release.outputs.tag_name }}
      echo "TAG=$VERSION" >> $GITHUB_ENV
    shell: bash

  - name: Install semver
    run: |
      wget -O /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
      chmod +x /usr/local/bin/semver
    shell: bash

  - name: Valid Origin
    run: |
      if [[ ${{ inputs.ORIGIN }} == 'fc' ]]; then
        echo "------------  FEATURE CANDIDATE - RC  ------------"
        echo "TAG=v$(semver bump minor v${{env.TAG}})" >> $GITHUB_ENV
      else
        echo "------------  HOTFIX - RC  ------------"
        echo "TAG=v$(semver bump patch v${{env.TAG}})" >> $GITHUB_ENV
      fi
    shell: bash

  - id: check-branch-exists
    uses: GuillaumeFalourd/branch-exists@v1
    with:
      branch: ${{env.TAG}}

  - if: steps.check-branch-exists.outputs.exists == 'true'
    run: |
      echo "------------  Open PR from ${{ steps.current.outputs.CURRENT_BRANCH }} to ${{env.TAG}}.  ------------"
      gh pr create --base=rc/${{env.TAG}} --head=${{ steps.current.outputs.CURRENT_BRANCH }} --title="[FC] branch ${{ steps.current.outputs.CURRENT_BRANCH }} to RC/${{env.TAG}} " --body="Pull Request FC to RC"      
    shell: bash

  - if: steps.check-branch-exists.outputs.exists == 'false'
    run: |
      
      if [[ ${{ inputs.ORIGIN }} == 'fc' ]]; then

        echo "------------  FEATURE CANDIDATE - RC  ------------"
        echo "New Release Candidate is rc/${{env.TAG}}"
        git fetch origin
        git checkout main || echo
        git checkout -b rc/${{env.TAG}} || echo
        git push --set-upstream origin rc/${{env.TAG}} || echo
        gh pr create --base=rc/${{env.TAG}} --head=${{ steps.current.outputs.CURRENT_BRANCH }} --title="[FC] branch ${{ steps.current.outputs.CURRENT_BRANCH }} to RC/${{env.TAG}} " --body="Pull Request FC to RC"

      else
        echo "------------  HOTFIX - RC  ------------"
        echo "New Release Candidate is rc/${{env.TAG}}"
        git fetch origin
        git checkout main || echo
        git checkout -b rc/${{env.TAG}} || echo
        git push --set-upstream origin rc/${{env.TAG}} || echo
      fi
    shell: bash
  # - name: Create GH Release
  #   if: ${{ inputs.ORIGIN == 'fc' }}
  #   id: create_release
  #   uses: actions/create-release@v1
  #   with:
  #     tag_name: ${{env.TAG}}
  #     release_name: Release ${{env.TAG}}
  #     body: |
  #       Changes in this Release
  #       - Release from: rc/${{env.TAG}}
  #       - Release date: ${{env.CURRENT_DATE}}
  #       - Commit: ${{github.sha}}
  #     draft: false
  #     prerelease: true

  # - name: Create GH Release
  #   if: ${{ inputs.ORIGIN == 'hotfix' }}
  #   id: create_release_hotfix
  #   uses: actions/create-release@v1
  #   with:
  #     tag_name: ${{env.TAG}}
  #     release_name: Hotfix ${{env.TAG}}
  #     body: |
  #       Changes in this Hotfix
  #       - Hotfix from: rc/${{env.TAG}}
  #       - Hotfix date: ${{env.CURRENT_DATE}}
  #       - Commit: ${{github.sha}}
  #     draft: false
  #     prerelease: true
